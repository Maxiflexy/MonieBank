import authApi from '../api/authApi';

export const AuthUtils = {
  // Check if user data exists in localStorage (UI state)
  hasLocalUserData: () => {
    try {
      const userData = localStorage.getItem('user');
      return userData && JSON.parse(userData);
    } catch (error) {
      return null;
    }
  },

  // Clear all authentication data
  clearAuthData: () => {
    localStorage.removeItem('user');
  },

  // Get user data from localStorage
  getLocalUserData: () => {
    try {
      const userData = localStorage.getItem('user');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error parsing user data from localStorage:', error);
      return null;
    }
  },

  // Verify authentication with server (using cookies)
  verifyAuthentication: async () => {
    try {
      const response = await authApi.checkAuth();
      return response;
    } catch (error) {
      console.error('Authentication verification failed:', error);
      return { isAuthenticated: false, user: null };
    }
  },

  // Handle authentication errors (e.g., token expired)
  handleAuthError: (error) => {
    // Don't clear data immediately - let the interceptor handle refresh first
    console.error('Authentication error:', error);

    // Only clear if it's definitely a permanent auth failure
    if (error.response?.status === 403 ||
        (error.response?.status === 401 && error.config?._retry)) {
      AuthUtils.clearAuthData();
    }
  },

  // Enhanced refresh session with better error handling
  refreshSession: async () => {
    try {
      console.log('AuthUtils: Refreshing session...');
      await authApi.refreshToken();

      const userData = await authApi.getCurrentUser();

      // Update localStorage with fresh user data
      localStorage.setItem('user', JSON.stringify({
        id: userData.id,
        email: userData.email,
        name: userData.name
      }));

      console.log('AuthUtils: Session refresh successful');
      return userData;
    } catch (error) {
      console.error('AuthUtils: Session refresh failed:', error);
      AuthUtils.clearAuthData();
      throw error;
    }
  },

  // Check if we should attempt authentication (has local data)
  shouldAttemptAuth: () => {
    const localData = AuthUtils.getLocalUserData();
    return localData !== null;
  },

  // Attempt silent authentication
  attemptSilentAuth: async () => {
    try {
      // First try to get current user
      const userData = await authApi.getCurrentUser();

      // Update localStorage
      localStorage.setItem('user', JSON.stringify({
        id: userData.id,
        email: userData.email,
        name: userData.name
      }));

      return { success: true, user: userData };
    } catch (error) {
      // If getCurrentUser fails, try refresh
      try {
        await authApi.refreshToken();
        const userData = await authApi.getCurrentUser();

        localStorage.setItem('user', JSON.stringify({
          id: userData.id,
          email: userData.email,
          name: userData.name
        }));

        return { success: true, user: userData };
      } catch (refreshError) {
        AuthUtils.clearAuthData();
        return { success: false, error: refreshError };
      }
    }
  }
};

export default AuthUtils;